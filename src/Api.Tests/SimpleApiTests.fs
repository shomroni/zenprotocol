module Api.Tests.SimpleApiTests

open NUnit.Framework
open FsUnit
open Consensus
open Infrastructure
open Consensus.Tests
open Config
open Json
open FSharp.Data

open Helper
open Utils

let i = ignore

let chainParams = (Chain.getChainParameters Chain.Test)

[<SetUp>]
[<TearDown>]
let clean() =
    Platform.cleanDirectory dataPath

module Blocks =
    let private fromHex hex =
        FsBech32.Base16.decode hex
        |> Option.bind Consensus.Serialization.Block.deserialize
    let blockNumber10 = Option.get <|fromHex "000000000000000699e0b9d1082d5f17b9ddbc0cfcb61994718fed1f84f555124d7e089d0000000a74a98fcbd9c8ef3eb484d62610ba4b6f4e2c239bf093fd5299f5fc4e77d6ddaa000001680af5dbf61dccccb169dfe2e9309f495a0000000001d8f1e00380ffb30731f17bb3e90406d8ebe8f93a56fd079667c2259843dce63426e80b68b020ba5a8dc8722bbef81499a6bf130b1203bfdcf4e1f69c0b5cb728a02b1998be653064be80f760b9d471dc9afbac2b24236c9f2eb0f08b7427942852dc78020100000000000106240000000a30759b07ca01caf8e524fc279946a1e96afc3546ee5f1fd4a1cfaf644763c2b40024050000"
    let blockNumber9 = Option.get <|fromHex "000000000000005b0cf6740fe340babc0191c55d50a566e752fcbd6fce2fbf78e77e7164000000091832dbd5779cb393b00be689a3f1613b2392efb7f209bf2139f2abb76a680521000001680af480e91dd3ad3efb70b9b6ecd9217a00000000006e39e9030db4cebf056379fc1adad76b3e2b2aff85a8b4d8d5a11d6632e19fa969b13e0a6d3b4d733babf0b833e1eaac6b4eb2fe6b5e05fc3c67455479022ad381873bf6be653064be80f760b9d471dc9afbac2b24236c9f2eb0f08b7427942852dc78020100000000000106240000000930759b07ca01caf8e524fc279946a1e96afc3546ee5f1fd4a1cfaf644763c2b40024050000"
    let blockNumber8 = Option.get <|fromHex "00000000000000413b70e309c646b0498f147c83c48ccfdcc36b55cc7ba69dd59a3f0ed5000000086f174164e1621eb419a4c6eb8f91e82135c846ea09e7a0ec07de002a179cfefc000001680af42eeb1dd9d1e8790534ee3c53eb86000000000101d907031fdf449f71d44810ed16269b07b7d7f1f1a338544a2984b16bca8140e44b9b4d9590d6df35a9ee1e90ecb6d32524fa744d7a4e16361d7c15065f93452d2c3530be653064be80f760b9d471dc9afbac2b24236c9f2eb0f08b7427942852dc78020100000000000106240000000830759b07ca01caf8e524fc279946a1e96afc3546ee5f1fd4a1cfaf644763c2b40024050000"
    let blockNumber7 = Option.get <|fromHex "000000000000009507a03489606a8518113f4717ffb68b00822e688061c6b73b8117af1900000007ee4c5625bd5eec02de1e305778d2c015b8a0e8e0c12bf16ca997ba94b11f8d1b000001680af36ffa1de0c9cfa2b4337a3f0c6f6f0000000000a39f5f03d9d788b8b3f9baa1e4a3413ada8ef471e1139acd8bf81a02ef7bce91e43ab938e807a0142ecbf255b60b1a4d5d7f5d3405473f4300669ced16eed5819246b0f3be653064be80f760b9d471dc9afbac2b24236c9f2eb0f08b7427942852dc78020100000000000106240000000730759b07ca01caf8e524fc279946a1e96afc3546ee5f1fd4a1cfaf644763c2b40024050000"
    let blockNumber6 = Option.get <|fromHex "000000000000006755f194d7c08c2c8e118bebdb6a2e1e5bc7bf5c92acec0b87ce08bfcf0000000627420dd7aee5b7a5553fe9b271b69ab519a2d391ced6f9a69749aef015d70a41000001680af2f8201de83071ad2327fb8112d7810000000000837d770345c69b3ab0be63cd5dbeb43ebe8204702c221a4e27b22fddc686ff40be5de13ff4b97c03a4e1963c0059e38c8db97e20905078c53661b647ccbcb7c1c0315171be653064be80f760b9d471dc9afbac2b24236c9f2eb0f08b7427942852dc78020100000000000106240000000630759b07ca01caf8e524fc279946a1e96afc3546ee5f1fd4a1cfaf644763c2b40024050000"
    let blockNumber5 = Option.get <|fromHex "000000000000009168ca89604ae8a575775fe045f8013c807dfbce948e460138ba546ffe000000058a907e0434e50de597ced2a55ccc94d163dc923bf1f172ef2ef5d4a5bddb5c7d000001680af296831df04137fb9a7c35f74e4e3200000000004a4d4c033f4bdb6ff80a74a9170ed9ad7869bfe718811478553550d4a372165483dd56061e4195c1045d896ba425e74958e4da6749816ca1796c71679c0f70dfa9328ae2be653064be80f760b9d471dc9afbac2b24236c9f2eb0f08b7427942852dc78020100000000000106240000000530759b07ca01caf8e524fc279946a1e96afc3546ee5f1fd4a1cfaf644763c2b40024050000"
    let blockNumber4 = Option.get <|fromHex "000000000000000aae789a890e95b1a9b4c91443f1452ddb363eda7b8b0a99550af6fc3e0000000478ac4290de47c8106e049d872592c60a603a57b7300ee667036147264eb5a485000001680af260051df7c9042640b19bc5d910910000000000b518250332115d31c76e874b464b1faaeb5e9fda19e71537e5ffb6d796d40ecc26bf779239b6ee7c15b560c52428f27c825955012ad005bd6f394550e848296e97f7b7c9be653064be80f760b9d471dc9afbac2b24236c9f2eb0f08b7427942852dc78020100000000000106240000000430759b07ca01caf8e524fc279946a1e96afc3546ee5f1fd4a1cfaf644763c2b40024050000"
    let blockNumber3 = Option.get <|fromHex "00000000000000379a65b3d3b5c2a822805ebea50e9723b2d21d4478841f1548f8d5928c000000034b594e492d922019eb99c6111e23dde6032cd214cd2bb8699a510aff8ac95893000001680af1d8b31dffffffdb64fb082144f47700000000007ccb6003f0725f58037f339cb3849bb6c4636efc9006aec9c04be5b78f97c92da661439d0b78640c86c8287c0a5ee0cf192142c303a98c3900973255416e03f2a52e84f6be653064be80f760b9d471dc9afbac2b24236c9f2eb0f08b7427942852dc78020100000000000106240000000330759b07ca01caf8e524fc279946a1e96afc3546ee5f1fd4a1cfaf644763c2b40024050000"
    let blockNumber2 = Option.get <|fromHex "000000005488069e4be0551a3c886543845c332633731c536853209c2dbe04c03594649000000002ca42763cfe7d87f7764817a6f97e4bab53c76d358ba405752c16f2f586d34ca8000001680af17c8a1dffffffa5b0043b0c48ba2b0000000000e4c26a0376567fbaffa524424dc79b6f46bdfe85340ae8dd0581c8298260349c7130f7c2413fd845e3e170c48790e0b35465d009f228b658f292374d6c9afbc6eb09b5e0be653064be80f760b9d471dc9afbac2b24236c9f2eb0f08b7427942852dc78020100000000000106240000000230759b07ca01caf8e524fc279946a1e96afc3546ee5f1fd4a1cfaf644763c2b40024050000"
    let blockNumber1 = Option.get <|fromHex "000000000000000000000000000000000000000000000000000000000000000000000000000000013fb123b93d0d1cd2f5ab1473a689940be14c006b41c570f52773979a6fe25644000001659ed5f51f1dffffff0000000000000000000000000000000003ddb8c855e4c3f076d45d151103066878d97fd6a4dbec4283e9b8dfe18a5d798e37a9ea89e05b22ed01a359f7d10853440e6c4eaae818e9d240f08af85d129c82be653064be80f760b9d471dc9afbac2b24236c9f2eb0f08b7427942852dc78020100000000000106240000000100000000000000000000000000000000000000000000000000000000000000000000010000"

[<Test>]
let ``Show get block 10 and 9 from blockchain/blocks``() =
    use actors = getTestnetActors()

    Blocks.blockNumber1
    |> publishBlockJson 
    |> post "blockchain/publishblock" |> i
    Blocks.blockNumber2
    |> publishBlockJson 
    |> post "blockchain/publishblock" |> i
    Blocks.blockNumber3
    |> publishBlockJson 
    |> post "blockchain/publishblock" |> i
    Blocks.blockNumber4
    |> publishBlockJson 
    |> post "blockchain/publishblock" |> i
    Blocks.blockNumber5
    |> publishBlockJson 
    |> post "blockchain/publishblock" |> i
    Blocks.blockNumber6
    |> publishBlockJson 
    |> post "blockchain/publishblock" |> i
    Blocks.blockNumber7
    |> publishBlockJson 
    |> post "blockchain/publishblock" |> i
    Blocks.blockNumber8
    |> publishBlockJson 
    |> post "blockchain/publishblock" |> i
    Blocks.blockNumber9
    |> publishBlockJson 
    |> post "blockchain/publishblock" |> i
    Blocks.blockNumber10
    |> publishBlockJson 
    |> post "blockchain/publishblock" |> i
    
    let parseData =
        Array.map (fun (contractData:JsonValue) ->
            JsonExtensions.GetProperty (contractData, "blockNumber") |> JsonExtensions.AsString,
            JsonExtensions.GetProperty (contractData, "rawBlock") |> JsonExtensions.AsString
        )
    
    get "blockchain/blocks?blockNumber=10&take=2"
    |> JsonValue.Parse
    |> JsonExtensions.AsArray
    |> parseData
    |> Array.mapi (fun i (x,_) -> printfn "%A" x; should equal (sprintf "%A" (10 - i)) x )
    |> i
    ()
